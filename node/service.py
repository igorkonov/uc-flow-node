import ujson
from typing import List, Tuple

from uc_flow_nodes.schemas import NodeRunContext
from uc_flow_nodes.service import NodeService
from uc_flow_nodes.views import info, execute
from uc_flow_schemas import flow
from uc_flow_schemas.flow import Property, CredentialProtocol, RunState
from uc_http_requester.requester import Request


class NodeType(flow.NodeType):
    id: str = '3aa5720b-0a02-4f8c-8397-872378a23200'
    type: flow.NodeType.Type = flow.NodeType.Type.action
    name: str = 'sum_field'
    is_public: bool = False
    displayName: str = 'Sum_field'
    icon: str = '<svg><text x="8" y="50" font-size="50">ü§ñ</text></svg>'
    description: str = '–°–µ—Ä–≤–∏—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –¥–≤—É—Ö –ø–æ–ª–µ–π'
    properties: List[Property] = [
        Property(
            displayName='–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ',
            name='text_field',
            type=Property.Type.STRING,
            placeholder='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ',
            description='–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ',
            required=True,
            default='0',
        ),
        Property(
            displayName='–ß–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ',
            name='number_field',
            type=Property.Type.NUMBER,
            placeholder='–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ —á–∏—Å–ª–æ',
            description='–ß–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ',
            required=True,
            default=0,
        ),
        Property(
            displayName='–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å',
            name='switch_field',
            type=Property.Type.BOOLEAN,
            placeholder='–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å',
            description='–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ß–∏—Å–ª–æ/—Ç–µ–∫—Å—Ç',
            required=True,
            default=True,
        ),
    ]


class InfoView(info.Info):
    class Response(info.Info.Response):
        node_type: NodeType


class ExecuteView(execute.Execute):
    async def post(self, json: NodeRunContext) -> NodeRunContext:
        try:
            text_value = json.node.data.properties['text_field']
            number_value = json.node.data.properties['number_field']

            result = int(text_value) + number_value

            if json.node.data.properties['switch_field']:
                result = str(result)

            await json.save_result({
                "result": result
            })
            json.state = RunState.complete
        except ValueError as e:
            self.log.warning(f'Error {e}')
            await json.save_error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ")
            json.state = RunState.error
        except Exception as e:
            self.log.warning(f'Error {e}')
            await json.save_error(str(e))
            json.state = RunState.error
        return json


class Service(NodeService):
    class Routes(NodeService.Routes):
        Info = InfoView
        Execute = ExecuteView
